#include "HashTable.h"
#include "WinnerCounter.h"

#include <iostream>
#include <assert.h>
#include <string>

void assert_that(bool expression, std::string test_description){
    std::cout << test_description << " ";
    assert(
        expression == true
    );
    std::cout << "‚úÖPASSED" << std::endl;
}

int main(){
    HashTable<std::string, int> h;
    
    assert_that(
        h.getNumberOfItems() == 0, 
        "—Ä–∞–∑–º–µ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏, —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ä–∞–≤–µ–Ω –Ω—É–ª—é"
    );
    
    h.insert("intern", 100000);
    assert_that(
        h.getNumberOfItems() == 1,
        "–ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É"
    );

    h.insert("intern", 90000);
    assert_that(
        h.getNumberOfItems() == 1,
        "–ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–º–µ—é—â–µ–≥–æ—Å—è –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º"
    );
    
    h.pop("intern");
    assert_that(
        h.getNumberOfItems() == 0,
        "–ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–º–µ—é—â–µ–≥–æ—Å—è –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –Ω–∞ 1"
    );

    h.insert("intern", 85000);
    h.insert("juniour", 150000);
    h.pop("middle");
    assert_that(
        h.getNumberOfItems() == 2,
        "–ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è"
    );

    HashTable<std::string, int> empty_h;
    h.clear();
    assert_that(
        empty_h == h,
        "–Ω–µ–ø—É—Å—Ç–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Ä–∞–≤–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    );

    h.insert("senior", 500000);
    assert_that(
        (h && empty_h) == empty_h,
        "–ø—Ä–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ –ª—é–±–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –ø—É—Å—Ç–æ–π, –æ–ø–µ—Ä–∞—Ç–æ—Ä && –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é"
    );

    assert_that(
        (h && h) == h,
        "–ø—Ä–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π, –æ–ø–µ—Ä–∞—Ç–æ—Ä && –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é, —Ä–∞–≤–Ω—É—é –ª—é–±–æ–π –∏–∑ –Ω–∏—Ö"
    );
    
    HashTable<std::string, int> copied_h;
    copied_h = h;

    assert_that(
        h == copied_h,
        "–∫–æ–ø–∏—è –Ω–µ–ø—É—Å—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Ä–∞–≤–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—É"
    );

    copied_h.insert("courier", 60000);
    assert_that(
        !(h == copied_h),
        "–ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –Ω–∞—Ä—É—à–∞–µ—Ç—Å—è"
    );

    h.insert("intern", 90000);
    h.insert("juniour", 150000);
    h.insert("middle", 250000);
    h.saveToFile("incomes.txt");

    HashTable<std::string, int> loaded_h;
    loaded_h.loadFromFile("incomes.txt");

    assert_that(
        h == loaded_h,
        "–Ω–µ–ø—É—Å—Ç–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –≤ —Ñ–∞–π–ª, —Ä–∞–≤–Ω–∞ –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –∏–∑ —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞"
    );

    WinnerCounter w_c;

    w_c.insert("–ù–∏–∫–æ–ª–∞–π", 14);
    w_c.insert("–°–µ—Ä–≥–µ–π", 4);
    w_c.insert("–ê—Ä—Ç–µ–º", 15);
    w_c.insert("–ò–∑–∞–±–µ–ª—å", 19);

    auto top_winners = w_c.getTopThreeWinners();
    assert_that(
        (
            top_winners.first == "–ò–∑–∞–±–µ–ª—å" &&
            top_winners.second == "–ê—Ä—Ç–µ–º" &&
            top_winners.third == "–ù–∏–∫–æ–ª–∞–π" &&
            top_winners.number == 3
        ),
        "–º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è 3—Ö –Ω–∞–∏–±–æ–ª—å—à–∏—Ö –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –∫–ª—é—á–µ–π: —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"
    );

    w_c.pop("–ò–∑–∞–±–µ–ª—å");
    top_winners = w_c.getTopThreeWinners();
    assert_that(
        (
            top_winners.first == "–ê—Ä—Ç–µ–º" &&
            top_winners.second == "–ù–∏–∫–æ–ª–∞–π" &&
            top_winners.third == "–°–µ—Ä–≥–µ–π" &&
            top_winners.number == 3
        ),
        "–º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è 3—Ö –Ω–∞–∏–±–æ–ª—å—à–∏—Ö –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –∫–ª—é—á–µ–π: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã"
    );

    w_c.pop("–°–µ—Ä–≥–µ–π");
    top_winners = w_c.getTopThreeWinners();
    assert_that(
        (
            top_winners.first == "–ê—Ä—Ç–µ–º" &&
            top_winners.second == "–ù–∏–∫–æ–ª–∞–π" &&
            top_winners.number == 2
        ),
        "–º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è 3—Ö –Ω–∞–∏–±–æ–ª—å—à–∏—Ö –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –∫–ª—é—á–µ–π: –º–µ–Ω—å—à–µ 3—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    );
    std
    ::cout << "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!\n–ú–æ–∂–Ω–æ –∏–¥—Ç–∏ —Ç—Ä–æ–≥–∞—Ç—å —Ç—Ä–∞–≤—É üåø" << std::endl;
    return 0;
}