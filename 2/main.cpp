#include <iostream>
#include <unistd.h> // –µ—Å–ª–∏ —É –≤–∞—Å —Å–∏—Å—Ç–µ–º–∞ Win32 –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ <windows.h>, –∞ sleep –Ω–∞ Sleep

#include <assert.h>
#include "CarManager.h"

int main(){
    Coordinates new_coordinates;
    Coordinates start_position(0.0, 0.0);
    // –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –±–µ–∑ —É—Å–∫–æ—Ä–µ–Ω–∏—è
    CarManager my_car_manager(10, 0.0, 0.0, 0.0, 0.0, start_position);
    sleep(2);
    new_coordinates = my_car_manager.getPosition();
    double eps = 0.1;
    assert(
        abs(new_coordinates.getX() - 20) < eps &&
        abs(new_coordinates.getY() - 0)< eps
    );
    // –¥–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–µ–π–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
    my_car_manager.setAcceleration(5.0);
    sleep(2);
    new_coordinates = my_car_manager.getPosition();
    assert(
        abs(new_coordinates.getX() - 50) < eps &&
        abs(new_coordinates.getY() - 0)< eps
    );
    // –¥–æ–±–∞–≤–ª—è–µ–º —É–≥–ª–æ–≤–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –∏ —É–±–∏—Ä–∞–µ–º –ª–∏–Ω–µ–π–Ω–æ–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
    my_car_manager.setAngularAcceleration(5.0);
    my_car_manager.setAcceleration(0.0);
    sleep(2);
    new_coordinates = my_car_manager.getPosition();
    assert(
        abs(new_coordinates.getX() - 53.4) < eps &&
        abs(new_coordinates.getY() - 4.8)< eps
    );
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—É—é –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    std::string class_id = my_car_manager.identify();
    assert(class_id == "car-manager");

    std::cout << "All tests passed succesfully!\n–ú–æ–∂–Ω–æ –∏–¥—Ç–∏ —Ç—Ä–æ–≥–∞—Ç—å —Ç—Ä–∞–≤—É üåø" << std::endl;
}