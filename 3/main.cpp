#include <iostream>
#include <unistd.h> // –µ—Å–ª–∏ —É –≤–∞—Å —Å–∏—Å—Ç–µ–º–∞ Win32 –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ <windows.h>, –∞ sleep –Ω–∞ Sleep

#include <assert.h>
#include "manager/CarManager.h"

int main(){
    Coordinates start_position(0.0, 0.0), new_coords, certain_point_coords;
    CarManager my_car_manager(10, 0.0, 0.0, 0.0, 0.0, start_position);
    double eps = 0.01;
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –ª–∞–π–≤–µ –∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
    // –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    // –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –±–µ–∑ —É—Å–∫–æ—Ä–µ–Ω–∏—è
    sleep(2);
    new_coords = my_car_manager.getPosition();
    certain_point_coords = my_car_manager.getPositionAtCertainTime(2);
    assert(
        abs(new_coords.getX() - certain_point_coords.getX()) < eps &&
        abs(new_coords.getY() - certain_point_coords.getY()) < eps
    );
    std::cout << "At certain point & at live funcs result matches: without acceleration" << std::endl;
    // –¥–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–µ–π–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
    my_car_manager.setAcceleration(5.0);
    sleep(3);
    new_coords = my_car_manager.getPosition();
    certain_point_coords = my_car_manager.getPositionAtCertainTime(5);

    assert(
        abs(new_coords.getX() - certain_point_coords.getX()) < eps &&
        abs(new_coords.getY() - certain_point_coords.getY()) < eps
    );
    std::cout << "At certain point & at live funcs result matches: +linear acceleration" << std::endl;
    // –¥–æ–±–∞–≤–ª—è–µ–º —É–≥–ª–æ–≤–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
    my_car_manager.setAngularAcceleration(5.0);
    sleep(1);
    new_coords = my_car_manager.getPosition();
    certain_point_coords = my_car_manager.getPositionAtCertainTime(6);
    assert(
        abs(new_coords.getX() - certain_point_coords.getX()) < eps &&
        abs(new_coords.getY() - certain_point_coords.getY()) < eps
    );
    std::cout << "At certain point & at live funcs result matches: +angular acceleration" << std::endl;
    // —É–±–∏—Ä–∞–µ–º –æ–±–∞ —Ç–∏–ø–∞ —É—Å–∫–æ—Ä–µ–Ω–∏—è
    my_car_manager.setAcceleration(0.0);
    my_car_manager.setAngularAcceleration(0.0);
    sleep(1);
    new_coords = my_car_manager.getPosition();
    certain_point_coords = my_car_manager.getPositionAtCertainTime(7);
    assert(
        abs(new_coords.getX() - certain_point_coords.getX()) < eps &&
        abs(new_coords.getY() - certain_point_coords.getY()) < eps
    );
    std::cout << "At certain point & at live funcs result matches: -linear acceleration, -angular acceleration" << std::endl;
    // –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é –º–∞—à–∏–Ω–∫—É –∏ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—á–∏—Ç–∞—é—Ç—Å—è –≤–µ—Ä–Ω–æ
    CarManager car_manager_check_process_coords(0.0, 0.0, 0.0, 0.0, 0.0, Coordinates(0.0, 0.0));
    // –¥–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–µ–π–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
    car_manager_check_process_coords.setAcceleration(10.0);
    sleep(1);
    new_coords = car_manager_check_process_coords.getPosition();
    certain_point_coords = car_manager_check_process_coords.getPositionAtCertainTime(1);

    assert(
        abs(new_coords.getX() - 5.0) < eps &&
        abs(new_coords.getY() - 0.0) < eps &&
        abs(certain_point_coords.getX() - 5.0) < eps &&
        abs(certain_point_coords.getY() - 0.0) < eps
    );
    std::cout << "Check processing coordinates: +linear acceleration" << std::endl;
    // —É–±–∏—Ä–∞–µ–º –ª–∏–Ω–µ–π–Ω–æ–µ —É—Å–∫–æ—Ä–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —É–≥–ª–æ–≤–æ–µ
    // –∏–º–µ–µ–º –º–∞—à–∏–Ω–∫—É, –¥–≤–∏–∂—É—é—â—É—é—Å—è —Å –Ω–∞—á–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é v = 10 –ø–æ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏
    car_manager_check_process_coords.setAcceleration(0.0);
    car_manager_check_process_coords.setAngularAcceleration(10.0);
    sleep(1);
    new_coords = car_manager_check_process_coords.getPosition();
    certain_point_coords = car_manager_check_process_coords.getPositionAtCertainTime(2);
    assert(
        abs(new_coords.getX() - 6.83) < eps &&
        abs(new_coords.getY() - 2.60) < eps &&
        abs(certain_point_coords.getX() - 6.83) < eps &&
        abs(certain_point_coords.getY() - 2.60) < eps
    );
    std::cout << "Check processing coordinates: -linear acceleration, +angular acceleration" << std::endl;
    std::cout << "All tests passed succesfully!\n–ú–æ–∂–Ω–æ –∏–¥—Ç–∏ —Ç—Ä–æ–≥–∞—Ç—å —Ç—Ä–∞–≤—É üåø" << std::endl;
    return 0;
}